// Generated by CoffeeScript 1.9.0
var Lazy, Module, debug, extraneous, moduleKeywords, utils, _,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Lazy = require('lazy.js');

_ = require('underscore');

debug = require('debug')('Ebay');

extraneous = require('../definitions/extraneous');

moduleKeywords = ['extended', 'included', 'methodize'];

utils = {};

utils.normalizeMethodName = function(method) {
  method = method[0].toLowerCase() + method.substring(1);
  return method;
};

utils.Module = Module = (function() {
  function Module() {}

  Module.extend = function(obj) {
    var key, value, _ref;
    for (key in obj) {
      value = obj[key];
      if (__indexOf.call(moduleKeywords, key) < 0) {
        this[key] = value;
      }
    }
    if ((_ref = obj.extended) != null) {
      _ref.apply(this);
    }
    return this;
  };

  Module.include = function(obj) {
    var key, value, _ref;
    for (key in obj) {
      value = obj[key];
      if (__indexOf.call(moduleKeywords, key) < 0) {
        this.prototype[key] = value;
      }
    }
    if ((_ref = obj.included) != null) {
      _ref.apply(this);
    }
    return this;
  };

  Module.methodize = function(methods, fn) {
    var method, _i, _len;
    for (_i = 0, _len = methods.length; _i < _len; _i++) {
      method = methods[_i];
      if (__indexOf.call(moduleKeywords, method) < 0) {
        this.prototype[utils.normalizeMethodName(method)] = fn(method);
      }
    }
    return this;
  };

  Module.defineGetter = function(name, getter) {
    return this.prototype.__defineGetter__(name, getter);
  };

  Module.defineSetter = function(name, setter) {
    return this.prototype.__defineSetter__(name, setter);
  };

  return Module;

})();

utils.firstKey = function(o) {
  return o[Object.keys(o)[0]];
};

utils.parsePagination = function(o) {
  if (!o.PaginationResult) {
    throw new Error("utils.parsePagination called on Object without `PaginationResult` key");
  }
  return {
    pages: o.PaginationResult.TotalNumberOfPages.value,
    n: o.PaginationResult.TotalNumberOfEntries.value
  };
};

utils.getArrayKey = function(o) {
  var key, _i, _len, _ref;
  _ref = Object.keys(o);
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    key = _ref[_i];
    if (Lazy(key).contains("Array")) {
      return utils.firstKey(o[key]);
    }
  }
};

utils.getListKey = function(o) {
  var key, _i, _len, _ref;
  _ref = Object.keys(o);
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    key = _ref[_i];
    if (Lazy(key).contains("List")) {
      return o[key];
    }
  }
};

utils.getListKeyName = function(o) {
  var key, _i, _len, _ref;
  _ref = Object.keys(o);
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    key = _ref[_i];
    if (Lazy(key).contains("List")) {
      return key;
    }
  }
  return null;
};

utils.normalizeResponse = function(results, cb) {
  var arr, key, keys, list, parsed, root, _i, _len;
  parsed = {};
  root = results[(this.op()) + "Response"];
  keys = Lazy(Object.keys(root));
  for (_i = 0, _len = extraneous.length; _i < _len; _i++) {
    key = extraneous[_i];
    delete root[key];
  }
  list = utils.getListKey(root);
  if (!list) {
    return utils.flatten(root);
  }
  parsed.pagination = utils.parsePagination(list);
  arr = utils.getArrayKey(list);
  parsed.results = Array.isArray(arr) ? arr : [arr];
  parsed.results = utils.flatten(parsed.results);
  return parsed;
};

utils.flatten = function(o) {
  var err, key, memo, _i, _len, _ref;
  try {
    if (o.value) {
      return o.value;
    }
    if (Array.isArray(o)) {
      return o.map(utils.flatten);
    } else {
      memo = {};
      _ref = Object.keys(o);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        memo[key] = o[key].value ? o[key].value : utils.flatten(o[key]);
      }
      return memo;
    }
  } catch (_error) {
    err = _error;
    return o;
  }
};

module.exports = utils;
