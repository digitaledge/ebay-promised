// Generated by CoffeeScript 1.9.0
var Ebay, Lazy, Q, async, debug, defaults, ecjson, endpoints, extraneous, globals, limit, o2x, request, utils, _,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __hasProp = {}.hasOwnProperty;

async = require('async');

Q = require('q');

o2x = require('object-to-xml');

request = require('request-promise');

ecjson = require("ecjson");

_ = require('underscore');

Lazy = require('lazy.js');

limit = require('simple-rate-limiter');

endpoints = require('./definitions/endpoints');

globals = require('./definitions/globals');

extraneous = require('./definitions/extraneous');

utils = require("./utils");

debug = require('debug')('Ebay');

defaults = JSON.stringify({
  __fields__: {},
  __globals__: {
    serviceName: "Trading",
    sandbox: false,
    site: 0,
    app: 'ebay-promised',
    raw: false,
    perPage: 100,
    callsPerEpoc: 3,
    epoc: 1000
  }
});

module.exports = Ebay = (function(_super) {
  __extends(Ebay, _super);

  Ebay.post = limit(request.post.bind(request));

  Ebay.get = limit(request.get.bind(request));

  Ebay.include(JSON.parse(defaults));

  Ebay.methodize(require('./definitions/calls'), function(method) {
    return function() {
      this.__op__ = method;
      return this;
    };
  });

  Ebay.methodize(require('./definitions/fields'), function(field) {
    return function(val) {
      if (!val) {
        return this.__fields__[field];
      }
      this.__fields__[field] = val;
      return this;
    };
  });

  Ebay.methodize(globals, function(setter) {
    return function(val) {
      if (!val) {
        return this.__globals__[setter];
      }
      this.__globals__[setter] = val;
      return this;
    };
  });

  function Ebay(options) {
    if (options == null) {
      options = {};
    }
    this.safelyApplyOptions(options);
    Ebay.post.to(this.callsPerEpoc()).per(this.epoc());
    Ebay.get.to(this.callsPerEpoc()).per(this.epoc());
    this;
  }

  Ebay.prototype.op = function() {
    return this.__op__;
  };

  Ebay.prototype.fields = function() {
    return this.__fields__;
  };

  Ebay.prototype.reset = function() {
    this.__fields__ = JSON.parse(defaults).__fields__;
    return this;
  };

  Ebay.prototype.safelyApplyOptions = function(options) {
    var setting, _i, _len, _ref, _results;
    if (options == null) {
      options = {};
    }
    _ref = Object.keys(options);
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      setting = _ref[_i];
      if (this.respondsTo(setting)) {
        _results.push(this[setting](options[setting]));
      }
    }
    return _results;
  };

  Ebay.prototype.callImmediately = function(method, options) {};

  Ebay.prototype.endpoint = function() {
    if (!endpoints[this.serviceName()]) {
      throw new Error("unknown endpoint for serviceName " + (this.serviceName()));
    }
    return endpoints[this.serviceName()][this.sandbox() ? 'sandbox' : 'production'];
  };

  Ebay.prototype.pagination = function(pageNumber) {
    if (pageNumber == null) {
      pageNumber = 1;
    }
    return {
      Pagination: {
        PageNumber: pageNumber,
        EntriesPerPage: this.perPage()
      }
    };
  };

  Ebay.prototype.respondsTo = function(method) {
    return _(this[method]).isFunction();
  };

  Ebay.prototype.__inject__ = function(pageNumber) {
    var fields, listKey;
    fields = this.fields();
    listKey = utils.getListKeyName(fields);
    if (listKey) {
      debug("listKey detected:: " + listKey);
    }
    if (listKey) {
      fields[listKey] = _.extend(fields[listKey], this.pagination(pageNumber));
    }
    return fields;
  };

  Ebay.prototype.__build__ = function(pageNumber) {
    var body, doc;
    if (pageNumber == null) {
      pageNumber = 1;
    }
    body = [];
    doc = {};
    body.push({
      RequesterCredentials: {
        eBayAuthToken: this.authToken()
      }
    });
    body.push(this.__inject__(pageNumber));
    doc['xml version="1.0" encoding="utf-8"?'] = null;
    doc[(this.op()) + "Request xmlns=\"urn:ebay:apis:eBLBaseComponents\""] = _.extend.apply(_, body);
    return o2x(doc);
  };

  Ebay.prototype.__headers__ = function() {
    return {
      'X-EBAY-API-CALL-NAME': this.op(),
      'X-EBAY-API-COMPATIBILITY-LEVEL': '775',
      'X-EBAY-API-SITEID': this.site(),
      'X-EBAY-API-CERT-NAME': this.cert(),
      'X-EBAY-API-APP-NAME': this.app()
    };
  };

  Ebay.prototype.__request__ = function(page, cb) {
    var options;
    if (page == null) {
      page = 1;
    }
    debug("starting request...");
    options = {
      url: this.endpoint(),
      body: this.__build__(page),
      headers: this.__headers__()
    };
    return Ebay.post(options).once('limiter-exec', (function(_this) {
      return function(promise) {
        return promise["catch"](cb).then(function(res) {
          debug("response recieved from eBay");
          return ecjson.XmlToJson(res, function(json) {
            return cb(null, utils.normalizeResponse.bind(_this)(json));
          });
        });
      };
    })(this));
  };

  Ebay.prototype.invoke = function(page) {
    var d;
    if (page == null) {
      page = 1;
    }
    d = Q.defer();
    this.__request__(page, (function(_this) {
      return function(err, pageOne) {
        var pages, _i, _ref, _results;
        if (err) {
          d.reject(err);
        }
        if (!(pageOne.pagination && pageOne.pagination.pages > 1)) {
          return d.resolve(pageOne);
        }
        pages = (function() {
          _results = [];
          for (var _i = 2, _ref = pageOne.pagination.pages; 2 <= _ref ? _i <= _ref : _i >= _ref; 2 <= _ref ? _i++ : _i--){ _results.push(_i); }
          return _results;
        }).apply(this);
        debug("Beginning pagination for pages: " + (pages.join(', ')));
        return async.mapLimit(pages, 2, _this.__request__.bind(_this), function(err, responses) {
          if (err) {
            return d.reject(err);
          }
          pageOne.results = Lazy(pageOne.results).concat(Lazy(responses).pluck('results')).value();
          debug(pageOne.pagination.n + " === " + pageOne.results.length + " ?");
          return d.resolve(pageOne);
        });
      };
    })(this));
    return d.promise;
  };

  return Ebay;

})(utils.Module);
